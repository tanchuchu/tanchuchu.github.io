<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>谭楚楚</title>
  
  <subtitle>尚未执佩剑，转眼即江湖</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tanchuchu.github.io/"/>
  <updated>2020-11-09T03:14:23.390Z</updated>
  <id>http://tanchuchu.github.io/</id>
  
  <author>
    <name>谭楚楚</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>组件之间的通信</title>
    <link href="http://tanchuchu.github.io/posts/17222/"/>
    <id>http://tanchuchu.github.io/posts/17222/</id>
    <published>2020-11-08T16:00:00.000Z</published>
    <updated>2020-11-09T03:14:23.390Z</updated>
    
    <content type="html"><![CDATA[<p>爸爸给儿子打电话 ： 利用v-bind传入，props接收</p><p>儿子给爸爸打电话： 利用$emit传入，v-on监听</p><p>爸爸主动拿起了儿子的电话： 在儿子身上绑定ref属性 ，通过this.$ref.XX获取</p><p>儿子主动拿起了爸爸的电话 ： this.$parent获取</p><p>爷爷给孙子打电话 ： 中间的爸爸v-bind=”$attrs”</p><p>孙子给爷爷打电话 : 中间的爸爸v-on=”$listeners”</p><p>秦始皇（老祖宗）给我打电话 : 祖宗只要声明了provide ， 其子孙曾孙等等辈就可以通过inject来访问</p><p>（葫芦娃）水娃给火娃打电话：定义全局EventBus/vuex</p><a id="more"></a><h3 id="爸爸给儿子打电话"><a href="#爸爸给儿子打电话" class="headerlink" title="爸爸给儿子打电话"></a>爸爸给儿子打电话</h3><p>父组件通过使用v-bind变量来实现数据的传入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 父组件</span><br><span class="line">&lt;Child :name&#x3D;&quot;name&quot; :clickFn&#x3D;&quot;handleClick&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>子组件通过实现options上面的props来接受父组件传递过来的数据</p><p>props接受约束数据，下面罗列了四种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 方式1：直接传递变量名，不做任何的类型约束以及值约束</span><br><span class="line">props:[&#39;name&#39;,&#39;handleClick&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方式2：传递变量名 + 类型的约束</span><br><span class="line">props:&#123;</span><br><span class="line">  name: String,</span><br><span class="line">  handleClick: Function</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方式3 ：传递变量名 + 多个类型的约束</span><br><span class="line">props:&#123;</span><br><span class="line">  name: [String, Number]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方式4：传递变量名 + 类型的约束 + 默认值</span><br><span class="line">props:&#123; </span><br><span class="line">  name:&#123;</span><br><span class="line">    type:String,</span><br><span class="line">    default: &#39;zhangshan&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  handleClick:&#123;</span><br><span class="line">     type: Function,</span><br><span class="line">     default: ()&#x3D;&gt;&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且为了保证单行数据流，不会造成其他子组件使用到父组件传递过来的数据的异常，要求子组件是不能够修改props的数据的值（程序也会通过报错来告知我们）。</p><h3 id="儿子给爸爸打电话"><a href="#儿子给爸爸打电话" class="headerlink" title="儿子给爸爸打电话"></a>儿子给爸爸打电话</h3><p>vue的原型上实现了$emit的方法，用来做事件的发送</p><p>子组件会通过$emit发送事件给父组件，父组件通过v-on的形式来监听子组件发送来的事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 子组件</span><br><span class="line">&lt;button @click&#x3D;&quot;$emit(&#39;onChildClick&#39;)&quot;&gt;click me &lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 父组件</span><br><span class="line">&lt;Child @onChildClick&#x3D;“onChildClick”&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>如果需要传递参数，可以直接在$emit的第二个参数处写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 子组件</span><br><span class="line">&lt;button @click&#x3D;&quot;$emit(&#39;onChildClick&#39;, item)&quot;&gt;click me &lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 父组件</span><br><span class="line">&lt;Child @onChildClick&#x3D;“onChildClick”&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">onChildClick(item)&#123;</span><br><span class="line">  console.log(&#39;我接受到了子组件传递过来的参数啦！&#39;, item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="爸爸主动拿起了儿子的电话"><a href="#爸爸主动拿起了儿子的电话" class="headerlink" title="爸爸主动拿起了儿子的电话"></a>爸爸主动拿起了儿子的电话</h3><p>ref是可以设置在子组件标签上面的一个属性，我们可以通过this.$refs.childRef来获取到子组件的实例，从而从实例上面调用子组件的属性或者方法！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Child ref&#x3D;&quot;childRef&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">this.$refs.childRef.onChildClick()</span><br></pre></td></tr></table></figure><p>除了ref，还可以使用$children来获取到子组件的实例，从而从实例上面调用子组件的属性或者方法！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$children[0] &#x2F;&#x2F; 第一个孩子组件</span><br></pre></td></tr></table></figure><h3 id="儿子主动拿起了爸爸的电话"><a href="#儿子主动拿起了爸爸的电话" class="headerlink" title="儿子主动拿起了爸爸的电话"></a>儿子主动拿起了爸爸的电话</h3><p>在子组件可以通过this.$parent来获取到父组件的实例，从而从实例上面调用子组件的属性或者方法！用法同上。</p><p>注：孩子有很多孩子，但是爸爸只有一个</p><h3 id="爷爷给孙子打电话"><a href="#爷爷给孙子打电话" class="headerlink" title="爷爷给孙子打电话"></a>爷爷给孙子打电话</h3><p>爷爷给孙子打电话有点累，爷爷不知道孙子的电话号码，于是发现只有必须先打给爸爸，爸爸再打给孙子！</p><p>爷爷说话又很慢，只能一个词一个词的说，</p><p>爷爷组件将参数一层一层原封不动的传递下去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 爷爷</span><br><span class="line">&lt;Parent :name&#x3D;&quot;name&quot; :age&#x3D;&quot;age&quot; :gender&#x3D;“gender”&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 父亲</span><br><span class="line">&lt;Child :name&#x3D;&quot;name&quot; :age&#x3D;&quot;age&quot; :gender&#x3D;“gender”&#x2F;&gt;</span><br><span class="line">props:[&#39;name&#39;, &#39;age&#39;, &#39;gender&#39;]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 孙子</span><br><span class="line">&lt;div&gt;&#123;&#123;name&#125;&#125; - &#123;&#123;age&#125;&#125; - &#123;&#123;gender&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">props:[&#39;name&#39;, &#39;age&#39;, &#39;gender&#39;]</span><br></pre></td></tr></table></figure><p>孙女羊羊🐑是我们家最聪明可爱的小萝莉！</p><p>羊羊看不下去了，于是找了个录音笔，把爷爷说的所有词录下来，然后把录音笔发给爸爸：</p><p>v-bind=”$props” 传递全部的props，稍微减轻了一点工作量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 爷爷</span><br><span class="line">&lt;Parent :name&#x3D;&quot;name&quot; :age&#x3D;&quot;age&quot; :gender&#x3D;gender&#x2F;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 爸爸 props接受 &amp;&amp; props一起传</span><br><span class="line">&lt;Child v-bind&#x3D;&quot;$props&quot;&#x2F;&gt;</span><br><span class="line">props:[&#39;name&#39;, &#39;age&#39;, &#39;gender&#39;]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 儿子 props接受</span><br><span class="line">&lt;div&gt;&#123;&#123;name&#125;&#125; - &#123;&#123;age&#125;&#125; - &#123;&#123;gender&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">props:[&#39;name&#39;, &#39;age&#39;, &#39;gender&#39;]</span><br></pre></td></tr></table></figure><p>但是发现爸爸需要把录音笔里面的所有词都全部拆解出来，再一个一个的传递给儿子，</p><p>羊羊看不下去了，告诉爸爸，你不需要听录音笔里面的词再告诉你儿子，你只需要把爷爷的这个录音笔直接给儿子啊！</p><p>v-bind=”$attrs”的其中一个功能是可以实现传递不在props里面的值，</p><p>父组件既不需要接受爷爷组件传递下来的一个一个的参数，也不需要一个一个的参数再传递下去给子组件！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 爷爷</span><br><span class="line">&lt;Parent :name&#x3D;&quot;name&quot; :age&#x3D;&quot;age&quot; :gender&#x3D;gender&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 父亲</span><br><span class="line">&lt;Child v-bind&#x3D;&quot;$attrs&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 儿子 props接受</span><br><span class="line">&lt;div&gt;&#123;&#123;name&#125;&#125; - &#123;&#123;age&#125;&#125; - &#123;&#123;gender&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">props:[&#39;name&#39;, &#39;age&#39;, &#39;gender&#39;]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 儿子 props 不接受</span><br><span class="line">&lt;div&gt;&#123;&#123;$attrs.name&#125;&#125; - &#123;&#123;$attrs.age&#125;&#125; - &#123;&#123;$attrs.gender&#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="孙子给爷爷打电话"><a href="#孙子给爷爷打电话" class="headerlink" title="孙子给爷爷打电话"></a>孙子给爷爷打电话</h3><p>孙子先把电话$emit(‘onChildClick’)打给了爸爸，爸爸拆解了孙子要说的话，再打电话给爷爷@onChildClick=”$emit(‘onChildClick’)”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 儿子</span><br><span class="line">&lt;button @click&#x3D;&quot;$emit(&#39;onChildClick&#39;)&quot; @click&#x3D;&quot;$emit(&#39;onChildClick1&#39;)&quot;&gt;click me &lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 爸爸</span><br><span class="line">&lt;Child @onChildClick&#x3D;&quot;$emit(&#39;onChildClick&#39;)&quot;  @onChildClick1&#x3D;&quot;$emit(&#39;onChildClick1&#39;)&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 爷爷</span><br><span class="line">&lt;Parent @onChildClick&#x3D;&quot;console.log(&#39;我终于收到了孙子辈的点击事件了！&#39;)&quot;  @onChildClick1&#x3D;&quot;console.log(&#39;我终于收到了孙子辈的点击事件了1！&#39;)&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>羊羊说爸爸你直接把电话转接到爷爷那里去吧！你干嘛要偷听别人通话！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v-on&#x3D;&quot;$listeners&quot;可以实现事件的打包</span><br><span class="line">&#x2F;&#x2F; 儿子</span><br><span class="line">&lt;button @click&#x3D;&quot;$emit(&#39;onChildClick&#39;)&quot;&gt;click me &lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 爸爸</span><br><span class="line">&lt;Child v-on&#x3D;“$listeners”&#x2F;&gt;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F; 爷爷</span><br><span class="line">&lt;Parent @onChildClick&#x3D;&quot;console.log(&#39;我终于收到了孙子辈的点击事件了！&#39;)&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="秦始皇（老祖宗）给我打电话-☎️"><a href="#秦始皇（老祖宗）给我打电话-☎️" class="headerlink" title="秦始皇（老祖宗）给我打电话 ☎️"></a>秦始皇（老祖宗）给我打电话 ☎️</h3><p>当我们的组件层级更深的时候，A -&gt; B -&gt; C -&gt; D -&gt; E  -&gt; F ，上面的方法都显得不太适用了，我们可以使用 provide &amp; inject 来实现跨层级的数据传递。</p><p>父组件只要声明了provide，在其子组件，孙组件，曾孙组件等能形成上下游关系的组件中交互，无论多深都能通过inject来访问provider中的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 最上面的组件 elForm</span><br><span class="line">provide()&#123;</span><br><span class="line">   return &#123;elForm:this&#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 最下面的组件 elFormItem</span><br><span class="line">inject:[&#39;elForm&#39;]</span><br></pre></td></tr></table></figure><p>###（葫芦娃）水娃给火娃打电话</p><p>比较累的做法：props + emit + on</p><p>兄弟1组件emit     -&gt;     父组件on     -&gt;    兄弟2组件props</p><p>期望做法：兄弟1组件emit事件，兄弟2组件on事件</p><h4 id="event-bus"><a href="#event-bus" class="headerlink" title="event bus"></a>event bus</h4><p>全局EventBus，虽然在某些示例中不提倡使用，但它是一种非常漂亮且简单的方法，可以跨组件之间共享数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.定义一个空的Vue实例，作为中央事件总线。</span><br><span class="line">2.A组件定义方法去触发自定义事件</span><br><span class="line">3.B组件在钩子里面去监听</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var EventBus &#x3D; new Vue();</span><br><span class="line"></span><br><span class="line">this.$EventBus.$emit(&#39;call&#39;,&#123;...&#125;);</span><br><span class="line"></span><br><span class="line">this.$EventBus.$on(&#39;call&#39;,($event) &#x3D;&gt; &#123;...&#125;)</span><br></pre></td></tr></table></figure><h4 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h4><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。<br><img src="https://vuex.vuejs.org/vuex.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    userInfo:&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123; &#x2F;&#x2F; commit</span><br><span class="line">    updateUserInfo (state,Object) &#123;</span><br><span class="line">       state.userInfo&#x3D; Object</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123; &#x2F;&#x2F; dispatch 副作用</span><br><span class="line">    getUserInfo(context)&#123;</span><br><span class="line">    &#x2F;&#x2F; 1.发送http请求，拿到用户信息数据</span><br><span class="line">    const userInfo &#x3D; http()</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 2.通过commit发送mutation里面的方法修改state</span><br><span class="line">    context.commit(&#39;updateUserInfo&#39;, userInfo)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters:&#123;</span><br><span class="line">    userInfo: state.userInfo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>组件间的通信方式有很多种:</p><p>props实现数据的向下传递</p><p>emitandemit and emitandon实现数据的发布与监听</p><p>ref,ref, ref,parent, $children可以获取到组件的实例</p><p>props,props, props,attrs, $listeners可以实现数据/事件的打包📦运输</p><p>eventbus and vuex可以实现跨组件的通信</p><p>以及还有一些没有写出来的通信方式…</p><p>原文：<a href="https://juejin.im/post/6889414644906065933">https://juejin.im/post/6889414644906065933</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;爸爸给儿子打电话 ： 利用v-bind传入，props接收&lt;/p&gt;
&lt;p&gt;儿子给爸爸打电话： 利用$emit传入，v-on监听&lt;/p&gt;
&lt;p&gt;爸爸主动拿起了儿子的电话： 在儿子身上绑定ref属性 ，通过this.$ref.XX获取&lt;/p&gt;
&lt;p&gt;儿子主动拿起了爸爸的电话 ： this.$parent获取&lt;/p&gt;
&lt;p&gt;爷爷给孙子打电话 ： 中间的爸爸v-bind=”$attrs”&lt;/p&gt;
&lt;p&gt;孙子给爷爷打电话 : 中间的爸爸v-on=”$listeners”&lt;/p&gt;
&lt;p&gt;秦始皇（老祖宗）给我打电话 : 祖宗只要声明了provide ， 其子孙曾孙等等辈就可以通过inject来访问&lt;/p&gt;
&lt;p&gt;（葫芦娃）水娃给火娃打电话：定义全局EventBus/vuex&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://tanchuchu.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://tanchuchu.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>插槽</title>
    <link href="http://tanchuchu.github.io/posts/17299/"/>
    <id>http://tanchuchu.github.io/posts/17299/</id>
    <published>2020-11-04T16:00:00.000Z</published>
    <updated>2020-11-05T13:06:51.881Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h4 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h4><p>规则：父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的</p><h4 id="后备内容（即设置默认内容）"><a href="#后备内容（即设置默认内容）" class="headerlink" title="后备内容（即设置默认内容）"></a>后备内容（即设置默认内容）</h4><p>为一个插槽设置具体的后备 (也就是默认的) 内容是很有用的，它只会在没有提供内容的时候被渲染</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Home父组件</span><br><span class="line">&lt;HelloWorld&gt;hahah&lt;&#x2F;HelloWorld&gt;  &#x2F;&#x2F;标签之间为空即渲染slot中的Submit，设置了内容即渲染设置的内容</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;HelloWorld子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">   &lt;button&gt;</span><br><span class="line">       &lt;slot&gt;Submit&lt;&#x2F;slot&gt;  </span><br><span class="line">   &lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><p><slot> 元素有一个特殊的 attribute：name。这个 attribute 可以用来定义额外的插槽</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;!-- 我们希望把页头放这里 --&gt;</span><br><span class="line">  &lt;&#x2F;header&gt;</span><br><span class="line">  &lt;main&gt;</span><br><span class="line">    &lt;!-- 我们希望把主要内容放这里 --&gt;</span><br><span class="line">  &lt;&#x2F;main&gt;</span><br><span class="line">  &lt;footer&gt;</span><br><span class="line">    &lt;!-- 我们希望把页脚放这里 --&gt;</span><br><span class="line">  &lt;&#x2F;footer&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>使用slot可以有多种写法<img src="https://cn.vuejs.org/v2/guide/components-slots.html" alt="Vue官网"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">        &lt;slot name&#x3D;&quot;header&quot;&gt;这里是header部分&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;header&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="利用插槽访问子组件的数据-作用域插槽"><a href="#利用插槽访问子组件的数据-作用域插槽" class="headerlink" title="利用插槽访问子组件的数据***作用域插槽"></a>利用插槽访问子组件的数据***作用域插槽</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;父组件自定义一个包含所有插槽 prop 的对象接收</span><br><span class="line"></span><br><span class="line">        &lt;HelloWorld&gt;</span><br><span class="line">            &lt;template v-slot&#x3D;&quot;userInfo&quot;&gt;（默认插槽的缩写语法）</span><br><span class="line">                &#123;&#123; userInfo.user.firstName &#125;&#125;</span><br><span class="line">            &lt;&#x2F;template&gt;</span><br><span class="line">        &lt;&#x2F;HelloWorld&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;子组件绑定属性</span><br><span class="line"></span><br><span class="line">    &lt;span&gt;</span><br><span class="line">      &lt;slot :user&#x3D;&quot;user&quot;&gt;&#123;&#123; user.lastName &#125;&#125;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure><p>注意默认插槽的缩写语法不能和具名插槽混用，因为它会导致作用域不明确</p><h3 id="解构插槽-Prop"><a href="#解构插槽-Prop" class="headerlink" title="解构插槽 Prop"></a>解构插槽 Prop</h3><p>作用域插槽的内部工作原理是将你的插槽内容包裹在一个拥有单个参数的函数里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function (slotProps) &#123;</span><br><span class="line">  &#x2F;&#x2F; 插槽内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//直接使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;HelloWorld&gt;</span><br><span class="line">    &lt;template v-slot&#x3D;&quot;&#123;user&#125;&quot;&gt;</span><br><span class="line">        &#123;&#123; user.firstName &#125;&#125;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;HelloWorld&gt;</span><br></pre></td></tr></table></figure><p>//将user重命名为userInfo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;HelloWorld&gt;</span><br><span class="line">    &lt;template v-slot&#x3D;&quot;&#123;user : userInfo&#125;&quot;&gt;</span><br><span class="line">        &#123;&#123; userInfo.firstName &#125;&#125;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;HelloWorld&gt;</span><br></pre></td></tr></table></figure><p>还可以设置默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;HelloWorld&gt;</span><br><span class="line">    &lt;template v-slot&#x3D;&quot;&#123;user &#x3D; &#123;firstname : &#39;jiaming&#39;&#125;&#125;&quot;&gt; </span><br><span class="line">        &#123;&#123; user.firstName &#125;&#125;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;HelloWorld&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;编译作用域&quot;&gt;&lt;a href=&quot;#编译作用域&quot; class=&quot;headerlink&quot; title=&quot;编译作用域&quot;&gt;&lt;/a&gt;编译作用域&lt;/h4&gt;&lt;p&gt;规则：父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作
      
    
    </summary>
    
    
      <category term="vue" scheme="http://tanchuchu.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://tanchuchu.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>props与$emit</title>
    <link href="http://tanchuchu.github.io/posts/17222/"/>
    <id>http://tanchuchu.github.io/posts/17222/</id>
    <published>2020-11-03T16:00:00.000Z</published>
    <updated>2020-11-09T02:57:40.216Z</updated>
    
    <content type="html"><![CDATA[<p>父传子—&gt; props<br>子传父—&gt; $emit</p><a id="more"></a><h4 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;HelloWorld @linkTo&#x3D;&quot;alertttt&quot;  :message&#x3D;&quot;message&quot;&gt;&lt;&#x2F;HelloWorld&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import HelloWorld from &quot;..&#x2F;components&#x2F;HelloWorld&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &#39;Home&#39;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            HelloWorld</span><br><span class="line">        &#125;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                message:&#39;这是父组件传给子组件的字段&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            alertttt()&#123;</span><br><span class="line">                alert(&#39;这是父组件内的方法&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;父传子props:&#123;&#123;message&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;link&quot;&gt;子调用父的方法&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#39;HelloWorld&#39;,</span><br><span class="line">    props:&#123;</span><br><span class="line">        message:String </span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            count:0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        link()&#123;</span><br><span class="line">            this.$emit(&#39;linkTo&#39;) </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;父传子—&amp;gt; props&lt;br&gt;子传父—&amp;gt; $emit&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://tanchuchu.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://tanchuchu.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>表单绑定</title>
    <link href="http://tanchuchu.github.io/posts/17222/"/>
    <id>http://tanchuchu.github.io/posts/17222/</id>
    <published>2020-11-03T16:00:00.000Z</published>
    <updated>2020-11-04T07:23:49.953Z</updated>
    
    <content type="html"><![CDATA[<p>你可以用 v-model 指令在表单 <input>、<textarea> 及 <select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p><p>v-model 会忽略所有表单元素的 value、checked、selected attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;jack&quot; value&#x3D;&quot;Jack&quot; v-model&#x3D;&quot;checkedNames&quot;&gt;</span><br><span class="line">        &lt;label for&#x3D;&quot;jack&quot;&gt;Jack&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;john&quot; value&#x3D;&quot;John&quot; v-model&#x3D;&quot;checkedNames&quot;&gt;</span><br><span class="line">        &lt;label for&#x3D;&quot;john&quot;&gt;John&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;mike&quot; value&#x3D;&quot;Mike&quot; v-model&#x3D;&quot;checkedNames&quot;&gt;</span><br><span class="line">        &lt;label for&#x3D;&quot;mike&quot;&gt;Mike&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;span&gt;Checked names: &#123;&#123; checkedNames &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    checkedNames: []</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我的理解是同一组表单v-model绑定同一个属性，当选中item时vue的内部机制将value push进checkedNames数组</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你可以用 v-model 指令在表单 &lt;input&gt;、&lt;textarea&gt; 及 &lt;select&gt; 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。&lt;/p&gt;
&lt;p&gt;v-model 会忽略所有表单元素的 value、checked、selected attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://tanchuchu.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://tanchuchu.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>const常量基础详解</title>
    <link href="http://tanchuchu.github.io/posts/12153/"/>
    <id>http://tanchuchu.github.io/posts/12153/</id>
    <published>2020-11-03T15:17:22.795Z</published>
    <updated>2020-11-03T15:22:19.405Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是const常量"><a href="#什么是const常量" class="headerlink" title="什么是const常量"></a>什么是const常量</h3><p>定义常量,常量就是不变的值，用在函数，变量，数组，指针类型说明前（如：const int a=10;）表示的a值永远是10.</p><a id="more"></a><h3 id="const详细"><a href="#const详细" class="headerlink" title="const详细"></a>const详细</h3><h4 id="声明const"><a href="#声明const" class="headerlink" title="声明const"></a>声明const</h4><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415</span>;</span><br><span class="line">PI <span class="comment">// 3.1415</span></span><br><span class="line"></span><br><span class="line">PI = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><blockquote><p>上面代码表明改变常量的值会报错。</p></blockquote><p>const声明的变量不得改变值，这意味着，<code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo;</span><br><span class="line"><span class="comment">// SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure><blockquote><p>上面代码表示，对于const来说，只声明不赋值，就会报错。</p></blockquote><p><code>const</code>的作用域与<code>let</code>命令相同：只在声明所在的块级作用域内有效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> MAX = <span class="number">5</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MAX <span class="comment">// Uncaught ReferenceError: MAX is not defined</span></span><br></pre></td></tr></table></figure><p><code>const</code>命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(MAX); <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="keyword">const</span> MAX = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码在常量MAX声明之前就调用，结果报错。</p></blockquote><p><code>const</code>声明的常量，也与<code>let</code>一样不可重复声明。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">"Hello!"</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下两行都会报错</span></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">"Goodbye!"</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">30</span>;</span><br></pre></td></tr></table></figure><p>对于复合类型的变量，变量名不指向数据，而是指向数据所在的地址。<code>const</code>命令只是保证变量名指向的地址不变，<br>并不保证该地址的数据不变，所以将一个对象声明为常量必须非常小心。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;;</span><br><span class="line">foo.prop = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">foo.prop</span><br><span class="line"><span class="comment">// 123</span></span><br><span class="line">foo = &#123;&#125;; <span class="comment">// TypeError: "foo" is read-only</span></span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，常量 foo 储存的是一个地址，这个地址指向一个对象。<br>不可变的只是这个地址，即不能把 foo 指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。</p></blockquote><p>下面是另一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [];</span><br><span class="line">a.push(<span class="string">'Hello'</span>); <span class="comment">// 可执行</span></span><br><span class="line">a.length = <span class="number">0</span>;    <span class="comment">// 可执行</span></span><br><span class="line">a = [<span class="string">'Dave'</span>];    <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，常量a是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给a，就会报错。<br>如果真的想将对象冻结，应该使用Object.freeze方法。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">Object</span>.freeze(&#123;&#125;);</span><br><span class="line"><span class="comment">// 常规模式时，下面一行不起作用；</span></span><br><span class="line"><span class="comment">// 严格模式时，该行会报错</span></span><br><span class="line">foo.prop = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，常量foo指向一个冻结的对象，所以添加新属性不起作用，严格模式时还会报错。</p></blockquote><p>除了将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> constantize = <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.freeze(obj);</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach( <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> obj[key] === <span class="string">'object'</span> ) &#123;</span><br><span class="line">      constantize( obj[key] );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>ES5只有两种声明变量的方法：<code>var</code>命令和<code>function</code>命令。ES6除了添加<code>let</code>和<code>const</code>命令，<br>后面章节还会提到，另外两种声明变量的方法：<code>import</code>命令和<code>class</code>命令。所以，<br>ES6一共有6种声明变量的方法。</p></blockquote><h4 id="顶层对象的属性-window"><a href="#顶层对象的属性-window" class="headerlink" title="顶层对象的属性(window)"></a>顶层对象的属性(window)</h4><p>顶层对象，在浏览器环境指的是 window 对象，在 Node 指的是 global 对象。ES5 之中，<br>顶层对象的属性与全局变量是等价的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.a = <span class="number">1</span>;</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">window</span>.a <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，顶层对象的属性赋值与全局变量的赋值，是同一件事。</p></blockquote><p>顶层对象的属性与全局变量挂钩，被认为是 JavaScript 语言最大的设计败笔之一。<br>这样的设计带来了几个很大的问题，首先是没法在编译时就报出变量未声明的错误，<br>只有运行时才能知道（因为全局变量可能是顶层对象的属性创造的，而属性的创造是动态的）；<br>其次，程序员很容易不知不觉地就创建了全局变量（比如打字出错）；<br>最后，顶层对象的属性是到处可以读写的，这非常不利于模块化编程。<br>另一方面，window 对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象，<br>也是不合适的。</p><p>ES6 为了改变这一点，一方面规定，为了保持兼容性，<code>var</code>命令和<code>function</code>命令声明的全局变量，<br>依旧是顶层对象的属性；另一方面规定，<code>let</code>命令、<code>const</code>命令、<code>class</code>命令声明的全局变量，<br>不属于顶层对象的属性。也就是说，从ES6开始，全局变量将逐步与顶层对象的属性脱钩。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 如果在Node的REPL环境，可以写成global.a</span></span><br><span class="line"><span class="comment">// 或者采用通用方法，写成this.a</span></span><br><span class="line"><span class="built_in">window</span>.a <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">window</span>.b <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，全局变量 a 由<code>var</code>命令声明，所以它是顶层对象的属性；<br>全局变量 b 由<code>let</code> 命令声明，所以它不是顶层对象的属性，返回<code>undefined</code>。</p></blockquote><h4 id="global-对象"><a href="#global-对象" class="headerlink" title="global 对象"></a>global 对象</h4><p>ES5的顶层对象，本身也是一个问题，因为它在各种实现里面是不统一的。</p><ul><li>浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。</li><li>浏览器和 Web Worker 里面，self也指向顶层对象，但是Node没有self。</li><li>Node 里面，顶层对象是global，但其他环境都不支持。</li></ul><p>同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用<code>this</code>变量，但是有局限性。</p><ul><li>全局环境中,<code>this</code>会返回顶层对象。但是，Node 模块和 ES6 模块中，<code>this</code> 返回的是当前模块。</li><li>函数里面的<code>this</code>,如果函数不是作为对象的方法运行，而是单纯作为函数运行，<code>this</code>会指向顶层对象。但是，严格模式下，这时<code>this</code>会返回<code>undefined</code>。</li><li>不管是严格模式，还是普通模式，<code>new Function(&#39;return this&#39;)()</code>，总是会返回全局对象。但是，如果浏览器用了<code>CSP（Content Security Policy，内容安全政策）</code>，那么<code>eval</code>、<code>new Function</code>这些方法都可能无法使用。</li></ul><p>综上所述，很难找到一种方法，可以在所有情况下，都取到顶层对象。下面是两种勉强可以使用的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">(<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span></span><br><span class="line">   ? <span class="built_in">window</span></span><br><span class="line">   : (<span class="keyword">typeof</span> process === <span class="string">'object'</span> &amp;&amp;</span><br><span class="line">      <span class="keyword">typeof</span> <span class="built_in">require</span> === <span class="string">'function'</span> &amp;&amp;</span><br><span class="line">      <span class="keyword">typeof</span> global === <span class="string">'object'</span>)</span><br><span class="line">     ? global</span><br><span class="line">     : <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">var</span> getGlobal = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> self !== <span class="string">'undefined'</span>) &#123; <span class="keyword">return</span> self; &#125;<span class="comment">// Web Worker</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span>) &#123; <span class="keyword">return</span> <span class="built_in">window</span>; &#125; <span class="comment">// windew</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> global !== <span class="string">'undefined'</span>) &#123; <span class="keyword">return</span> global; &#125; <span class="comment">// node环境</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'unable to locate global object'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在有一个提案，在语言标准的层面，引入 global 作为顶层对象。也就是说，在所有环境下，<br>global 都是存在的，都可以从它拿到顶层对象。</p><p>垫片库 system.global 模拟了这个提案，可以在所有环境拿到 global。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommonJS的写法</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'system.global/shim'</span>)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6模块的写法</span></span><br><span class="line"><span class="keyword">import</span> shim <span class="keyword">from</span> <span class="string">'system.global/shim'</span>; shim();</span><br></pre></td></tr></table></figure><blockquote><p>上面代码可以保证各种环境里面，global对象都是存在的。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommonJS的写法</span></span><br><span class="line"><span class="keyword">var</span> global = <span class="built_in">require</span>(<span class="string">'system.global'</span>)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6模块的写法</span></span><br><span class="line"><span class="keyword">import</span> getGlobal <span class="keyword">from</span> <span class="string">'system.global'</span>;</span><br><span class="line"><span class="keyword">const</span> global = getGlobal();</span><br></pre></td></tr></table></figure><blockquote><p>上面代码将顶层对象放入变量global。</p></blockquote><p><code>globalThis</code> 提供了一个标准的方式来获取不同环境下的全局 <code>this</code>  对象（也就是全局对象自身）。<br>不像 <code>window</code> 或者 <code>self</code> 这些属性，它确保可以在有无窗口的各种环境下正常工作。<br>所以，你可以安心的使用 <code>globalThis</code>，不必担心它的运行环境。为便于记忆，你只需要记住，全局作用域中的<br> <code>this</code> 就是 <code>globalThis</code>。</p><h3 id="我的总结"><a href="#我的总结" class="headerlink" title="我的总结"></a>我的总结</h3><p>1.const</p><ul><li>本质：<code>const</code>定义一个常量 指向一个内存地址不变，但不能影响内存的数据变化（比如：复合型变量(数组，对象)）</li><li>和<code>let</code>一样有 <code>暂时性死区</code>,不能在声明前使用</li><li>没有变量提升</li></ul><p>2.顶层对象属性</p><ul><li>顶层对象的属性与全局变量是等价的 (window)</li><li>es6有声明变量的方法，两种<code>var</code>,<code>function</code>声明全局变量，还有<code>let</code>,<code>const</code>,<code>class</code>,<code>import</code>  </li></ul><p>3.Global对象</p><ul><li>浏览器里面里使用<code>window</code></li><li>web Worker<code>self</code></li><li>Node 里使用<code>global</code></li><li>三种环境都能用<code>globalThis</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是const常量&quot;&gt;&lt;a href=&quot;#什么是const常量&quot; class=&quot;headerlink&quot; title=&quot;什么是const常量&quot;&gt;&lt;/a&gt;什么是const常量&lt;/h3&gt;&lt;p&gt;定义常量,常量就是不变的值，用在函数，变量，数组，指针类型说明前（如：const int a=10;）表示的a值永远是10.&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://tanchuchu.github.io/categories/js/"/>
    
    
      <category term="es6" scheme="http://tanchuchu.github.io/tags/es6/"/>
    
      <category term="js" scheme="http://tanchuchu.github.io/tags/js/"/>
    
      <category term="const" scheme="http://tanchuchu.github.io/tags/const/"/>
    
  </entry>
  
  <entry>
    <title>v-if与v-show、v-if与v-for</title>
    <link href="http://tanchuchu.github.io/posts/60979/"/>
    <id>http://tanchuchu.github.io/posts/60979/</id>
    <published>2020-11-02T16:00:00.000Z</published>
    <updated>2020-11-09T02:35:59.311Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a>v-if vs v-show</h3><figure class="highlight plain"><figcaption><span>``` 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96; v-if &#96;&#96;&#96; 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</span><br><span class="line"></span><br><span class="line">相比之下，&#96;&#96;&#96; v-show &#96;&#96;&#96; 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</span><br><span class="line"></span><br><span class="line">一般来说，&#96;&#96;&#96; v-if &#96;&#96;&#96; 有更高的切换开销，而 &#96;&#96;&#96; v-show &#96;&#96;&#96;有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用&#96;&#96;&#96; v-show &#96;&#96;&#96; 较好；如果在运行时条件很少改变，则使用 &#96;&#96;&#96; v-if &#96;&#96;&#96;较好。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### v-if 与 v-for 不推荐一起使用</span><br><span class="line">当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级</span><br><span class="line"></span><br><span class="line">### v-for</span><br></pre></td></tr></table></figure><div v-for="(val,keys,index) of object" :key="index"> -  - </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v-for遍历对象时第一个参数是值，第二个参数是键，第三个是索引</span><br><span class="line"></span><br><span class="line">可以用 of 替代 in 作为分隔符，因为它更接近 JavaScript 迭代器的语法</span><br><span class="line">建议尽可能在使用 v-for 时提供 key attribute</span><br></pre></td></tr></table></figure>data(){    return{      object: {        title: 'How to do lists in Vue',        author: 'Jane Doe',        publishedAt: '2016-04-10'      }<pre><code>}</code></pre><p>  }</p><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;v-if-vs-v-show&quot;&gt;&lt;a href=&quot;#v-if-vs-v-show&quot; class=&quot;headerlink&quot; title=&quot;v-if vs v-show&quot;&gt;&lt;/a&gt;v-if vs v-show&lt;/h3&gt;&lt;figure
      
    
    </summary>
    
    
      <category term="vue" scheme="http://tanchuchu.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://tanchuchu.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>class与style绑定</title>
    <link href="http://tanchuchu.github.io/posts/54638/"/>
    <id>http://tanchuchu.github.io/posts/54638/</id>
    <published>2020-11-01T16:00:00.000Z</published>
    <updated>2020-11-03T15:22:19.412Z</updated>
    
    <content type="html"><![CDATA[<p>我们可以传给 v-bind:class 一个对象，以动态地切换 class</p><p>v-bind:style 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS property 名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名</p><a id="more"></a><h3 id="v-bind-class-class"><a href="#v-bind-class-class" class="headerlink" title="v-bind:class (:class)"></a>v-bind:class (:class)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;单独绑定class</span><br><span class="line">&lt;div class&#x3D;&quot;box&quot; :class&#x3D;&quot;&#123;activecss : active , radiuscss : radius&#125;&quot; &gt;test&lt;&#x2F;div&gt;</span><br><span class="line">&#x2F;&#x2F;绑定class数组对象</span><br><span class="line">&lt;div class&#x3D;&quot;box&quot; :class&#x3D;&quot;[classObj1,classObj2]&quot; &gt;test&lt;&#x2F;div&gt;</span><br><span class="line">&#x2F;&#x2F;单独绑定+class数组对象</span><br><span class="line">&lt;div class&#x3D;&quot;box&quot; :class&#x3D;&quot;[&#123;activecss:active&#125;,classObj1,classObj2]&quot;&gt;test&lt;&#x2F;div&gt;</span><br><span class="line">&#x2F;&#x2F;三元二次</span><br><span class="line">&lt;div class&#x3D;&quot;box&quot; :class&#x3D;&quot;[ active ? classObj2:&#39;&#39; , classObj1]&quot; &gt;test&lt;&#x2F;div&gt;</span><br><span class="line">&#x2F;&#x2F;结合计算属性</span><br><span class="line">&lt;div class&#x3D;&quot;box&quot; :class&#x3D;&quot;classObj3&quot; &gt;test&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">                loading:true,</span><br><span class="line">                getData:true,</span><br><span class="line">                active:true,</span><br><span class="line">                radius:false,</span><br><span class="line">                classObj1:&#123;</span><br><span class="line">                  bordercss:true,</span><br><span class="line">                &#125;,</span><br><span class="line">                classObj2:&#123;</span><br><span class="line">                  fontcss:true</span><br><span class="line">                &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">computed:&#123;</span><br><span class="line">    classObj3()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        colorcss:this.loading &amp;&amp; this.getData</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">  height: 100px;</span><br><span class="line">  width: 100px;</span><br><span class="line">  background-color: green;</span><br><span class="line">&#125;</span><br><span class="line">  .activecss&#123;</span><br><span class="line">    margin: 100px auto;</span><br><span class="line">  &#125;</span><br><span class="line">  .radiuscss&#123;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">.bordercss&#123;</span><br><span class="line">  border:2px solid red</span><br><span class="line">&#125;</span><br><span class="line">.fontcss&#123;</span><br><span class="line">  font-size:50px</span><br><span class="line">&#125;</span><br><span class="line">  .colorcss&#123;</span><br><span class="line">    color: purple;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>当 active 或者 radius 变化时，class 列表将相应地更新。例如，如果 radius 的值为 true，class 列表将变为 “box activecss radiuscss”</p><h3 id="v-bind-style-style"><a href="#v-bind-style-style" class="headerlink" title="v-bind:style (:style)"></a>v-bind:style (:style)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;对象语法</span><br><span class="line"> &lt;div :style&#x3D;&quot;&#123;fontSize:fontSize , height:height , width:width , backgroundColor:backgroundColor&#125;&quot;&gt;test&lt;&#x2F;div&gt;</span><br><span class="line"> &lt;div :style&#x3D;&quot;boxStyle1&quot;&gt;test&lt;&#x2F;div&gt;</span><br><span class="line"> &#x2F;&#x2F;数组语法</span><br><span class="line"> &lt;div :style&#x3D;&quot;[boxStyle1,boxStyle2]&quot;&gt;test&lt;&#x2F;div&gt;</span><br><span class="line"> &#x2F;&#x2F;多重值</span><br><span class="line"> &lt;div :style&#x3D;&quot;[&#123;display:[&#39;-webkit-box&#39;, &#39;-ms-flexbox&#39;,&#39;flex&#39;]&#125;,boxStyle2]&quot;&gt;</span><br><span class="line">   &lt;div :style&#x3D;&quot;boxStyle1&quot;&gt;test&lt;&#x2F;div&gt;</span><br><span class="line">   &lt;div :style&#x3D;&quot;boxStyle1&quot;&gt;test&lt;&#x2F;div&gt;</span><br><span class="line">   &lt;div :style&#x3D;&quot;boxStyle1&quot;&gt;test&lt;&#x2F;div&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">             fontSize:&#39;50px&#39;,</span><br><span class="line">              height:&#39;100px&#39;,</span><br><span class="line">              width:&#39;100px&#39;,</span><br><span class="line">              backgroundColor:&#39;red&#39;,</span><br><span class="line">              boxStyle1:&#123;</span><br><span class="line">                fontSize:&#39;50px&#39;,</span><br><span class="line">                height:&#39;100px&#39;,</span><br><span class="line">                width:&#39;100px&#39;,</span><br><span class="line">                backgroundColor:&#39;red&#39;,</span><br><span class="line">                margin:&#39;20px&#39;</span><br><span class="line">              &#125;,</span><br><span class="line">              boxStyle2:&#123;</span><br><span class="line">                border:&#39;2px solid green&#39;</span><br><span class="line">              &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们可以传给 v-bind:class 一个对象，以动态地切换 class&lt;/p&gt;
&lt;p&gt;v-bind:style 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS property 名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://tanchuchu.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://tanchuchu.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue修饰符</title>
    <link href="http://tanchuchu.github.io/posts/17199/"/>
    <id>http://tanchuchu.github.io/posts/17199/</id>
    <published>2020-11-01T16:00:00.000Z</published>
    <updated>2020-11-04T03:15:04.531Z</updated>
    
    <content type="html"><![CDATA[<p>修饰符 (modifier) 是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定，又可以说其是对参数绑定后的方法拓展。</p><a id="more"></a><p>以下给出几个常用的修饰符方法：</p><ul><li>lazy这个修饰符会在光标离开input框才会更新数据</li></ul><figure class="highlight plain"><figcaption><span>type</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* trim是输入框过滤首尾的空格</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;&lt;input type&#x3D;&quot;text&quot; v-model.trim&#x3D;&quot;value&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>number的功能是先输入数字就会限制输入只能是数字</li></ul><figure class="highlight plain"><figcaption><span>type</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* stop是阻止事件冒泡,但默认事件任然会执行</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;&lt;button @click.stop&#x3D;&quot;test&quot;&gt;test&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><ul><li>prevent 阻止默认行为，相当于调用了event.preventDefault()方法，比如表单的提交、a标签的跳转就是默认事件，但冒泡事件还是会执行</li></ul><p>ps：加入代码：<code>return false</code>会同事阻止事件冒泡也会阻止默认事件；写上此代码，连接不会被打开，事件也不会传递到上一层的父元素；可以理解为return false就等于同时调用了event.stopPropagation()和event.preventDefault()</p><figure class="highlight plain"><figcaption><span>@click.prevent</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* self 只有元素本身触发时才触发方法，就是只有点击元素本身才会触发</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;&lt;div @click.self&#x3D;&quot;test&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><ul><li>once 只能用一次，无论点击几次，执行一次之后都不会再执行</li></ul><figure class="highlight plain"><figcaption><span>@click.once</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*添加事件监听器时使用事件捕获模式 </span><br><span class="line"></span><br><span class="line">*即内部元素触发的事件先在此处理，然后才交由内部元素进行处理</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;&lt;div v-on:click.capture&#x3D;&quot;doThis&quot;&gt;...&lt;&#x2F;div&gt;&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line">使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* Vue 还对应 addEventListener 中的 passive 选项提供了 .passive 修饰符。</span><br><span class="line"></span><br><span class="line">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 而不会等待 &#96;onScroll&#96; 完成  --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 这其中包含 &#96;event.preventDefault()&#96; 的情况 --&gt;</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;&lt;div v-on:scroll.passive&#x3D;&quot;onScroll&quot;&gt;...&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>这个 .passive 修饰符尤其能够提升移动端的性能。</p><p>不要把 .passive 和 .prevent 一起使用，因为 .prevent 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，.passive 会告诉浏览器你不想阻止事件的默认行为。</p><p>还有按键修饰符、系统修饰键、.exact 修饰符、鼠标按钮修饰符等，详情可以参考官网<a href="https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">Vue官网</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;修饰符 (modifier) 是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定，又可以说其是对参数绑定后的方法拓展。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://tanchuchu.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://tanchuchu.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>计算属性computed与监听属性watch</title>
    <link href="http://tanchuchu.github.io/posts/53712/"/>
    <id>http://tanchuchu.github.io/posts/53712/</id>
    <published>2020-11-01T16:00:00.000Z</published>
    <updated>2020-11-04T13:39:02.556Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="1—–计算属性computed-自带getter和setter方法"><a href="#1—–计算属性computed-自带getter和setter方法" class="headerlink" title="1—–计算属性computed 自带getter和setter方法"></a>1—–计算属性computed 自带getter和setter方法</h2><p><img src="https://git.kancloud.cn/repos/tanchuchu/webhtmljs/raw/7f4054bba106eec0e235f6f383eeeef12a51f21d/images/screenshot_1578214401061.png?access-token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MDQ0MzEwMjAsImlhdCI6MTYwNDM4NzgyMCwicmVwb3NpdG9yeSI6InRhbmNodWNodVwvd2ViaHRtbGpzIiwidXNlciI6eyJ1c2VybmFtZSI6InRhbmNodWNodSIsIm5hbWUiOiJ0YW5jaHVjaHUiLCJlbWFpbCI6IjI1OTg4Mjk2MzZAcXEuY29tIiwidG9rZW4iOiJmNGVhZDFmMTU1NDEyMGFhMzU2ODlkNjQ4YzE5NzkzZCIsImF1dGhvcml6ZSI6eyJwdWxsIjp0cnVlLCJwdXNoIjp0cnVlLCJhZG1pbiI6dHJ1ZX19fQ.O9xVyGMJHzvjKxVoduXD39fXDG1t_a4MhE6E06ClOOg" alt=""></p><p>减少模板中的业务逻辑，进行数据缓存，依赖固定的数据类型（响应式数据）</p><h2 id="2——监听属性watch-必须要先在data里面定义属性才可以进行监听"><a href="#2——监听属性watch-必须要先在data里面定义属性才可以进行监听" class="headerlink" title="2——监听属性watch 必须要先在data里面定义属性才可以进行监听"></a>2——监听属性watch 必须要先在data里面定义属性才可以进行监听</h2><p><img src="https://git.kancloud.cn/repos/tanchuchu/webhtmljs/raw/7f4054bba106eec0e235f6f383eeeef12a51f21d/images/screenshot_1578302282125.png?access-token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MDQ0MzEwMjAsImlhdCI6MTYwNDM4NzgyMCwicmVwb3NpdG9yeSI6InRhbmNodWNodVwvd2ViaHRtbGpzIiwidXNlciI6eyJ1c2VybmFtZSI6InRhbmNodWNodSIsIm5hbWUiOiJ0YW5jaHVjaHUiLCJlbWFpbCI6IjI1OTg4Mjk2MzZAcXEuY29tIiwidG9rZW4iOiJmNGVhZDFmMTU1NDEyMGFhMzU2ODlkNjQ4YzE5NzkzZCIsImF1dGhvcml6ZSI6eyJwdWxsIjp0cnVlLCJwdXNoIjp0cnVlLCJhZG1pbiI6dHJ1ZX19fQ.O9xVyGMJHzvjKxVoduXD39fXDG1t_a4MhE6E06ClOOg" alt=""></p><p>3—-总结<br><img src="https://git.kancloud.cn/repos/tanchuchu/webhtmljs/raw/7f4054bba106eec0e235f6f383eeeef12a51f21d/images/screenshot_1578303281744.png?access-token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MDQ0MzEwMjAsImlhdCI6MTYwNDM4NzgyMCwicmVwb3NpdG9yeSI6InRhbmNodWNodVwvd2ViaHRtbGpzIiwidXNlciI6eyJ1c2VybmFtZSI6InRhbmNodWNodSIsIm5hbWUiOiJ0YW5jaHVjaHUiLCJlbWFpbCI6IjI1OTg4Mjk2MzZAcXEuY29tIiwidG9rZW4iOiJmNGVhZDFmMTU1NDEyMGFhMzU2ODlkNjQ4YzE5NzkzZCIsImF1dGhvcml6ZSI6eyJwdWxsIjp0cnVlLCJwdXNoIjp0cnVlLCJhZG1pbiI6dHJ1ZX19fQ.O9xVyGMJHzvjKxVoduXD39fXDG1t_a4MhE6E06ClOOg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1—–计算属性computed-自带getter和setter方法&quot;&gt;&lt;a href=&quot;#1—–计算属性computed-自带getter和setter方法&quot; class=&quot;headerlink&quot; title=&quot;1—–计算属性c
      
    
    </summary>
    
    
      <category term="vue" scheme="http://tanchuchu.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://tanchuchu.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>webpack性能优化</title>
    <link href="http://tanchuchu.github.io/posts/34455/"/>
    <id>http://tanchuchu.github.io/posts/34455/</id>
    <published>2020-10-25T16:00:00.000Z</published>
    <updated>2020-11-03T15:22:19.456Z</updated>
    
    <content type="html"><![CDATA[<p>HMR(Hot Module Replacement)：热模块替换 模块热替换（当一个模块发生变化，只会重新打包这一个模块，极大的提升构建速度）<br>source-map 一种提供源代码到构建后代码的映射技术 （如果构建后的代码出错，可以映射追踪到源代码的错误位置）</p><a id="more"></a><h3 id="1-HMR"><a href="#1-HMR" class="headerlink" title="1.HMR"></a>1.HMR</h3><p>当一个文件发生改变时，所有的文件将会被重新构建打包，在开发环境配置deserver中设置<code>hot:true</code></p><p>(1) 样式文件：支持HMR–&gt;开发环境时配置的style-loader内部实现了（所以开发环境我们使用style-loader，而生产环境考虑到代码优化会提取成单独的文件）  </p><p>(2) js文件：默认不使用HMR功能，需要在入口文件中添加支持热模块替换功能的代码，但只能实现对非入口文件的处理，入口文件变化引起的重新构建是不可避免的哦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if(module.hot)&#123;</span><br><span class="line">  &#x2F;&#x2F;当module.hot为true时说明开启了HMR功能 ---&gt;让HMR开启的代码</span><br><span class="line">  module.hot.accept(&#39;需要被检测改变的js模块路径&#39;,function () &#123;</span><br><span class="line">      &#x2F;&#x2F;方法会监听改js文件的变化，一旦发生变化，其他默认不会重新构建</span><br><span class="line">    &#x2F;&#x2F;会执行后面的回调函数，我们需要做的是将改文件的关键方法重新执行</span><br><span class="line">     &#x2F;&#x2F;eg:add()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) html文件：默认不能使用HMR功能，配置开启热模块替换时，html文件会出现模块变化时不能重新构建的问题，此时需要修改entry，设置<code>entry:[&#39;./src/index.js&#39;,&#39;./src/index.html&#39;]</code></p><h3 id="2-source-map"><a href="#2-source-map" class="headerlink" title="2.source-map"></a>2.source-map</h3><p> 在配置中添加    devtool:’cheap-source-map’ //配置后需要重新运行<br><a href="https://www.kancloud.cn/book/tanchuchu/webhtmljs/edit">图解</a></p><ul><li>内联与外部的区别：外部会生成一个.map的文件，内联没有（内联生成的source-map在构建后的js中，检测时搜索sourceURL即可）；内联构建速度更快</li><li>使用的选择：</li><li>1.开发环境：要求构建速度快，调试更友好</li><li>速度快慢（eval&gt;inline&gt;cheap&gt;…）</li><li>eval-cheap-source-map</li><li>eval-source-map</li><li>调试更友好：</li><li>source-map</li><li>cheap-module-source-map</li><li>cheap-source-map</li><li></li><li>—&gt;eval-source-map / eval-cheap-module-source-map</li><li>2.生产环境：源代码是否隐藏，调试是否更友好（内联会让代码体积变大，so生产环境不使用内联）</li><li>隐藏代码：</li><li>nosources-source-map（隐藏全部代码）</li><li>hidden-source-map（隐藏源代码，不隐藏构建后代码）</li><li></li><li>调试友好：</li><li>source-map</li><li></li><li>—&gt;source-map /cheap-module-source-map</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HMR(Hot Module Replacement)：热模块替换 模块热替换（当一个模块发生变化，只会重新打包这一个模块，极大的提升构建速度）&lt;br&gt;source-map 一种提供源代码到构建后代码的映射技术 （如果构建后的代码出错，可以映射追踪到源代码的错误位置）&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://tanchuchu.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://tanchuchu.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>html压缩</title>
    <link href="http://tanchuchu.github.io/posts/42731/"/>
    <id>http://tanchuchu.github.io/posts/42731/</id>
    <published>2020-10-24T16:00:00.000Z</published>
    <updated>2020-11-03T15:22:19.444Z</updated>
    
    <content type="html"><![CDATA[<p>html不存在兼容 其压缩在plugins里面直接设置即可</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class="line">            minify: &#123;</span><br><span class="line">                &#x2F;&#x2F;移除空格</span><br><span class="line">                collapseWhiteSpace:true,</span><br><span class="line">                &#x2F;&#x2F;移除注释</span><br><span class="line">                removeComments:true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;html不存在兼容 其压缩在plugins里面直接设置即可&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://tanchuchu.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://tanchuchu.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack生产环境设置</title>
    <link href="http://tanchuchu.github.io/posts/31383/"/>
    <id>http://tanchuchu.github.io/posts/31383/</id>
    <published>2020-10-24T16:00:00.000Z</published>
    <updated>2020-11-03T15:22:19.478Z</updated>
    
    <content type="html"><![CDATA[<h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">const &#123;resolve&#125; &#x3D; require(&#39;path&#39;)</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class="line">const MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;)</span><br><span class="line">const OptimizeCssAssetsWebpackPlugin &#x3D; require(&#39;optimize-css-assets-webpack-plugin&#39;)</span><br><span class="line">const commonCssLoader &#x3D; &#123;</span><br><span class="line">        MiniCssExtractPlugin.loader,</span><br><span class="line">        &#39;css-loader&#39;,</span><br><span class="line">        &#123;</span><br><span class="line">            loader:&#39;postcss-loader&#39;,</span><br><span class="line">            options: &#123;</span><br><span class="line">                postcssOptions:&#123;</span><br><span class="line">                    plugins:[require(&quot;postcss-preset-env&quot;)()]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &quot;js&#x2F;built.js&quot;,</span><br><span class="line">        path:resolve(__dirname,build)</span><br><span class="line">    &#125;,</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.css$&#x2F;,</span><br><span class="line">                use:[...commonCssLoader]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;&#x2F;&#x2F;use数组的loader执行顺序是由下往上，less-loader将less文件转化成css，再通过兼容处理，css-loader将css加载到js中，再提取成单独的文件</span><br><span class="line">                test:&#x2F;\.less$&#x2F;,</span><br><span class="line">                use:[...commonCssLoader ,&#39;less-loader&#39;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\(jpg|png|gif)$&#x2F;,</span><br><span class="line">                loader: &#39;url-loader&#39;,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit:8*1024,</span><br><span class="line">                    name:&#39;[hash:10].[ext]&#39;,</span><br><span class="line">                    esModule:false</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.html$&#x2F;,</span><br><span class="line">                loader:&#39;html-loader&#39;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                exclude:&#x2F;\.(html|js|css|jpg|png|gif)$&#x2F;,</span><br><span class="line">                loader:&#39;file-loader&#39;,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    name:&#39;[hash:10].[ext]&#39;,</span><br><span class="line">                    outputPath:&#39;media&#39;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.js$&#x2F;,</span><br><span class="line">                loader:&#39;eslint-loader&#39;,</span><br><span class="line">                enforce:&#39;pre&#39;, &#x2F;&#x2F;正常来说，一个文件只能被一个loader处理；当一个文件被多个loader处理时，需要指定loader的先后顺序</span><br><span class="line">                exclude: &#x2F;node_modules&#x2F;,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    fix:true</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.js$&#x2F;,</span><br><span class="line">                loader:&#39;babel-loader&#39;,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    preset:[</span><br><span class="line">                        &#39;@babel&#x2F;preset-env&#39;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            useBuiltIns:&#39;usage&#39;,</span><br><span class="line">                            corejs:&#123;version:3&#125;,</span><br><span class="line">                            targets:&#123;</span><br><span class="line">                                chrome:&#39;60&#39;,</span><br><span class="line">                                firefox:&#39;50&#39;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: &quot;.&#x2F;src&#x2F;index.html&quot;,</span><br><span class="line">            minify:&#123;</span><br><span class="line">                collapseWhiteSpace:true,</span><br><span class="line">                removeComments:true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        new MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename:&#39;css&#x2F;built.css&#39;</span><br><span class="line">        &#125;),</span><br><span class="line">        new OptimizeCssAssetsWebpackPlugin()</span><br><span class="line">    ],</span><br><span class="line">    mode:&#39;production&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;test&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;webpack.config.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;@babel&#x2F;core&quot;: &quot;^7.12.3&quot;,</span><br><span class="line">    &quot;@babel&#x2F;polyfill&quot;: &quot;^7.12.1&quot;,</span><br><span class="line">    &quot;@babel&#x2F;preset-env&quot;: &quot;^7.12.1&quot;,</span><br><span class="line">    &quot;babel&quot;: &quot;^6.23.0&quot;,</span><br><span class="line">    &quot;babel-loader&quot;: &quot;^8.1.0&quot;,</span><br><span class="line">    &quot;corejs&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">    &quot;css-loader&quot;: &quot;^5.0.0&quot;,</span><br><span class="line">    &quot;eslint&quot;: &quot;^7.12.0&quot;,</span><br><span class="line">    &quot;eslint-config-airbnb-base&quot;: &quot;^14.2.0&quot;,</span><br><span class="line">    &quot;eslint-loader&quot;: &quot;^4.0.2&quot;,</span><br><span class="line">    &quot;eslint-plugin-import&quot;: &quot;^2.22.1&quot;,</span><br><span class="line">    &quot;file-loader&quot;: &quot;^6.1.1&quot;,</span><br><span class="line">    &quot;html-loader&quot;: &quot;^1.3.2&quot;,</span><br><span class="line">    &quot;html-webpack-plugin&quot;: &quot;^4.5.0&quot;,</span><br><span class="line">    &quot;less&quot;: &quot;^3.12.2&quot;,</span><br><span class="line">    &quot;less-loader&quot;: &quot;^7.0.2&quot;,</span><br><span class="line">    &quot;mini-css-extract-plugin&quot;: &quot;^1.2.0&quot;,</span><br><span class="line">    &quot;optimize-css-assets-webpack-plugin&quot;: &quot;^5.0.4&quot;,</span><br><span class="line">    &quot;postcss&quot;: &quot;^8.1.1&quot;,</span><br><span class="line">    &quot;postcss-loader&quot;: &quot;^4.0.4&quot;,</span><br><span class="line">    &quot;postcss-preset-env&quot;: &quot;^6.7.0&quot;,</span><br><span class="line">    &quot;style-loader&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;url-loader&quot;: &quot;^4.1.1&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^4.44.2&quot;,</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^3.3.12&quot;,</span><br><span class="line">    &quot;webpack-dev-server&quot;: &quot;^3.11.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;&#125;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;browserslist&quot;: &#123;</span><br><span class="line">    &quot;development&quot;: [</span><br><span class="line">      &quot;last 1  chrome version&quot;,</span><br><span class="line">      &quot;last 1  firefox version&quot;,</span><br><span class="line">      &quot;last 1  safari version&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;production&quot;: [</span><br><span class="line">      &quot;&gt;0.2%&quot;,</span><br><span class="line">      &quot;no dead&quot;,</span><br><span class="line">      &quot;no op_mini all&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;eslintConfig&quot;: &#123;</span><br><span class="line">    &quot;extends&quot;: &quot;airbnb-base&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;webpack-config-js&quot;&gt;&lt;a href=&quot;#webpack-config-js&quot; class=&quot;headerlink&quot; title=&quot;webpack.config.js&quot;&gt;&lt;/a&gt;webpack.config.js&lt;/h3&gt;&lt;figure class
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://tanchuchu.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://tanchuchu.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>js兼容性处理</title>
    <link href="http://tanchuchu.github.io/posts/15652/"/>
    <id>http://tanchuchu.github.io/posts/15652/</id>
    <published>2020-10-24T16:00:00.000Z</published>
    <updated>2020-11-03T15:22:19.490Z</updated>
    
    <content type="html"><![CDATA[<p>js 兼容处理 –&gt; babel @babel/core (babel核心库) babel-loader</p><p>1、基本js兼容处理 –&gt; @babel/preset-env —&gt;处理不了如promise等的高级语法</p><p>2、全部js兼容处理 –&gt; @babel/polyfilll (不是babel插件，下载后在入口文件引入即可) —&gt;全部处理，体积太大</p><p>3、按需加载 –&gt; corejs </p><a id="more"></a><h3 id="1-基本js兼容处理-—-gt-babel-preset-env"><a href="#1-基本js兼容处理-—-gt-babel-preset-env" class="headerlink" title="1.基本js兼容处理 —&gt; @babel/preset-env"></a>1.基本js兼容处理 —&gt; @babel/preset-env</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">    rules:[</span><br><span class="line">        &#123;</span><br><span class="line">            test:&#x2F;\.js$&#x2F;,</span><br><span class="line">            exclude:&#x2F;node_modules&#x2F;,</span><br><span class="line">            loader:&#39;babel-loader&#39;,</span><br><span class="line">            options: &#123;</span><br><span class="line">                &#x2F;&#x2F;预设babel进行怎样的js处理</span><br><span class="line">                presets:[&quot;@babel&#x2F;preset-env&quot;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="2-全部js兼容处理-—-gt-babel-polyfill-配置好上面基本js兼容处理后再在入口文件引入-babel-polyfill即可"><a href="#2-全部js兼容处理-—-gt-babel-polyfill-配置好上面基本js兼容处理后再在入口文件引入-babel-polyfill即可" class="headerlink" title="2.全部js兼容处理 —&gt;@babel/polyfill (配置好上面基本js兼容处理后再在入口文件引入@babel/polyfill即可)"></a>2.全部js兼容处理 —&gt;@babel/polyfill (配置好上面基本js兼容处理后再在入口文件引入@babel/polyfill即可)</h3><h3 id="3-按需加载-—-gt-corejs"><a href="#3-按需加载-—-gt-corejs" class="headerlink" title="3.按需加载 —&gt;corejs"></a>3.按需加载 —&gt;corejs</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.js$&#x2F;,</span><br><span class="line">                exclude:&#x2F;node_modules&#x2F;,</span><br><span class="line">                loader:&#39;babel-loader&#39;,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    &#x2F;&#x2F;预设babel进行怎样的js处理</span><br><span class="line">                    presets:[</span><br><span class="line">                        [</span><br><span class="line">                            &#39;@babel&#x2F;preset-env&#39;,</span><br><span class="line">                            &#123;</span><br><span class="line">                                &#x2F;&#x2F;按需加载</span><br><span class="line">                                useBuiltIns:&#39;usage&#39;,</span><br><span class="line">                                &#x2F;&#x2F;指定corejs最新版本</span><br><span class="line">                                corejs:&#123;</span><br><span class="line">                                    version:3</span><br><span class="line">                                &#125;,</span><br><span class="line">                                &#x2F;&#x2F;指定兼容性做到浏览器的哪个版本</span><br><span class="line">                                targets:&#123;</span><br><span class="line">                                    chrome:&#39;60&#39;,</span><br><span class="line">                                    firefox:&#39;60&#39;,</span><br><span class="line">                                    ie:&#39;9&#39;,</span><br><span class="line">                                    safari:&#39;10&#39;,</span><br><span class="line">                                    edge:&#39;17&#39;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="js压缩"><a href="#js压缩" class="headerlink" title="js压缩"></a>js压缩</h3><p>将mode:production 即可 生产模式下js会自动压缩</p><h4 id="总结：基本js兼容处理-按需加载即可完成js兼容处理"><a href="#总结：基本js兼容处理-按需加载即可完成js兼容处理" class="headerlink" title="总结：基本js兼容处理+按需加载即可完成js兼容处理"></a>总结：基本js兼容处理+按需加载即可完成js兼容处理</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js 兼容处理 –&amp;gt; babel @babel/core (babel核心库) babel-loader&lt;/p&gt;
&lt;p&gt;1、基本js兼容处理 –&amp;gt; @babel/preset-env —&amp;gt;处理不了如promise等的高级语法&lt;/p&gt;
&lt;p&gt;2、全部js兼容处理 –&amp;gt; @babel/polyfilll (不是babel插件，下载后在入口文件引入即可) —&amp;gt;全部处理，体积太大&lt;/p&gt;
&lt;p&gt;3、按需加载 –&amp;gt; corejs &lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://tanchuchu.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://tanchuchu.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>eslint语法检查与兼容</title>
    <link href="http://tanchuchu.github.io/posts/35527/"/>
    <id>http://tanchuchu.github.io/posts/35527/</id>
    <published>2020-10-23T16:00:00.000Z</published>
    <updated>2020-11-03T15:22:19.438Z</updated>
    
    <content type="html"><![CDATA[<p>eslint针对js语法进行检查 只检查自己的源代码 不检查第三方等—&gt;eslint eslint-loader</p><a id="more"></a><h4 id="package-json文件"><a href="#package-json文件" class="headerlink" title="package.json文件"></a>package.json文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;eslintConfig&quot;:&#123;</span><br><span class="line">    &quot;extends&quot;:&quot;airbnb-base&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">下载eslint eslint-loader eslint-config-airbnb-base eslint-plugin-import</span><br><span class="line"></span><br><span class="line">module:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">        &#123;</span><br><span class="line">        test:&#x2F;\.js$&#x2F;,</span><br><span class="line">        loader:&#39;eslint-loader&#39;,</span><br><span class="line">        exclude:&#x2F;node_modules&#x2F;,</span><br><span class="line">        option:&#123;</span><br><span class="line">            &#x2F;&#x2F;自动修复不规范js语法</span><br><span class="line">            fix:true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js文件中出现警告：unexpected console statement no-console</p><p>可以在需要忽略eslint语法检查的语句上方添加注释eslint-disable-next-line</p><p>//eslint-disable-next-line<br>console.log(1111)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;eslint针对js语法进行检查 只检查自己的源代码 不检查第三方等—&amp;gt;eslint eslint-loader&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://tanchuchu.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://tanchuchu.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>css单独提取、兼容与压缩</title>
    <link href="http://tanchuchu.github.io/posts/43720/"/>
    <id>http://tanchuchu.github.io/posts/43720/</id>
    <published>2020-10-17T16:00:00.000Z</published>
    <updated>2020-11-03T15:22:19.451Z</updated>
    
    <content type="html"><![CDATA[<p>webpack提取css插件mini-css-extract-plugin</p><p>webpack兼容css postcss</p><p>webpack压缩css 插件opitimize-css-assets-webpack-plugin</p><a id="more"></a><h2 id="1、提取css"><a href="#1、提取css" class="headerlink" title="1、提取css"></a>1、提取css</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">const &#123;resolve&#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line">const MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry:&#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:&#39;js&#x2F;build.js&#39;,</span><br><span class="line">        path:resolve(__dirname,&#39;build&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.css$&#x2F;,</span><br><span class="line">                use:[</span><br><span class="line">                    &#x2F;&#x2F; &#39;style-loader&#39;,</span><br><span class="line">                    MiniCssExtractPlugin.loader,</span><br><span class="line">                    &#39;css-loader&#39;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template:&#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">        &#125;),</span><br><span class="line">        new MiniCssExtractPlugin(&#123;</span><br><span class="line">            &#x2F;&#x2F;打包后的文件路径</span><br><span class="line">            filename: &#39;css&#x2F;index.css&#39;</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    mode:&#39;development&#39;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、css兼容性问题"><a href="#2、css兼容性问题" class="headerlink" title="2、css兼容性问题"></a>2、css兼容性问题</h2><p>##webpack.config.js代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">const &#123;resolve&#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置nodejs环境变量</span><br><span class="line">&#x2F;&#x2F; process.env.NODE_ENV &#x3D; &#39;development&#39;;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry:&#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:&#39;js&#x2F;build.js&#39;,</span><br><span class="line">        path:resolve(__dirname,&#39;build&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.css$&#x2F;,</span><br><span class="line">                use:[</span><br><span class="line">                    &#x2F;&#x2F; &#39;style-loader&#39;,</span><br><span class="line">                    MiniCssExtractPlugin.loader,</span><br><span class="line">                    &#39;css-loader&#39;,</span><br><span class="line">                    &#x2F;&#x2F;css兼容性 --&gt;postcss -----&gt; 安装postcss-loader postcss-preset-env</span><br><span class="line">                    &#x2F;&#x2F;默认loader配置 &#39;postcss-loader&#39;</span><br><span class="line">                    &#x2F;&#x2F;修改默认loader</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader:&#39;postcss-loader&#39;,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            postcssOptions:&#123;</span><br><span class="line">                                plugins: [[&#39;postcss-preset-env&#39;,&#123;&#125;]]</span><br><span class="line">                                &#x2F;&#x2F;或者 plugins: [require(&quot;postcss-preset-env&quot;)()],</span><br><span class="line">                                &#x2F;&#x2F;postcss插件 帮助postcss找到package.json中的browserslist里面的配置，通过配置加载指定的css兼容性样式</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template:&#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    mode:&#39;development&#39;,</span><br><span class="line">    stats: &#123;</span><br><span class="line">&#x2F;&#x2F; One of the two if I remember right</span><br><span class="line">        entrypoints: false,</span><br><span class="line">        children: false</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase:(__dirname , &#39;js&#x2F;build&#39;),</span><br><span class="line">        compress:true,</span><br><span class="line">        port:3000,</span><br><span class="line">        open:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##package.json添加代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  &quot;browserslist&quot;: &#123;</span><br><span class="line"> &#x2F;&#x2F;开发环境，如果想要将开发环境设为默认环境可设置nodejs环境变量process.env.NODE_ENV &#x3D; &#39;development&#39;</span><br><span class="line">    &quot;development&quot;: [</span><br><span class="line">      &quot;last 1  chrome version&quot;,</span><br><span class="line">      &quot;last 1  firefox version&quot;,</span><br><span class="line">      &quot;last 1  safari version&quot;</span><br><span class="line">    ],</span><br><span class="line">&#x2F;&#x2F;生产环境--默认是生产环境，与mode无关</span><br><span class="line">    &quot;production&quot;: [</span><br><span class="line">      &quot;&gt;0.2%&quot;,</span><br><span class="line">      &quot;no dead&quot;,</span><br><span class="line">      &quot;no op_mini all&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="3、css压缩"><a href="#3、css压缩" class="headerlink" title="3、css压缩"></a>3、css压缩</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下载并引入optimize-css-assets-webpack-plugin</span><br><span class="line">const OptimizeCssAssetsWebpackPlugin &#x3D; require(&#39;optimize-css-assets-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">在plugins里面new OptimizeCssAssetsWebpackPlugin()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webpack提取css插件mini-css-extract-plugin&lt;/p&gt;
&lt;p&gt;webpack兼容css postcss&lt;/p&gt;
&lt;p&gt;webpack压缩css 插件opitimize-css-assets-webpack-plugin&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://tanchuchu.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://tanchuchu.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack开发环境设置</title>
    <link href="http://tanchuchu.github.io/posts/61788/"/>
    <id>http://tanchuchu.github.io/posts/61788/</id>
    <published>2020-10-17T16:00:00.000Z</published>
    <updated>2020-11-03T15:22:19.468Z</updated>
    
    <content type="html"><![CDATA[<p>开发环境配置：代码能运行即可<br>webpack 会打包输出<br>npx webpack-dev-server 只会在内存中打包不会输出</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">const &#123;resolve&#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry:&#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:&#39;js&#x2F;build.js&#39;,</span><br><span class="line">        path:resolve(__dirname,&#39;build&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.css$&#x2F;,</span><br><span class="line">                use:[&#39;style-loader&#39; , &#39;css-loader&#39;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.less$&#x2F;,</span><br><span class="line">                use:[&#39;style-loader&#39; , &#39;css-loader&#39; , &#39;less-loader&#39;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.html$&#x2F;,</span><br><span class="line">                loader:&#39;html-loader&#39;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.(jpg|png|gif)$&#x2F;,</span><br><span class="line">                loader: &#39;url-loader&#39;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    limit:2*1024 ,</span><br><span class="line">                    name:&#39;[hash:10].[ext]&#39; ,</span><br><span class="line">                    esModule:false,</span><br><span class="line">                    outputPath:&#39;images&#39;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                exclude:&#x2F;\.(html|css|js|less|jpg|png|gif)$&#x2F;,</span><br><span class="line">                loader : &#39;file-loader&#39;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    name:&#39;[hash:10].[ext]&#39;,</span><br><span class="line">                    outputPath:&#39;media&#39;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template:&#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    mode:&#39;development&#39;,</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        contentBase:resolve(__dirname,&#39;build&#39;),</span><br><span class="line">        compress:true,</span><br><span class="line">        port:3000,</span><br><span class="line">        open:true</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;webpack5与webpack-dev-server版本不兼容</span><br><span class="line">    &#x2F;&#x2F;&quot;webpack&quot;: &quot;^4.44.2&quot;,</span><br><span class="line">    &#x2F;&#x2F; &quot;webpack-cli&quot;: &quot;^3.3.12&quot;,</span><br><span class="line">    &#x2F;&#x2F; &quot;webpack-dev-server&quot;: &quot;^3.11.0&quot;</span><br><span class="line">    &#x2F;&#x2F;兼容版本 需要先npm uninstall webpack webpack-dev-server -g</span><br><span class="line">    &#x2F;&#x2F;npm install webpack@4.44.2 webpack-dev-server@3.11.0 -g</span><br><span class="line">    &#x2F;&#x2F;在package中直接改成该版本在npm install也可，但都需要先移除之前的版本</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发环境配置：代码能运行即可&lt;br&gt;webpack 会打包输出&lt;br&gt;npx webpack-dev-server 只会在内存中打包不会输出&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://tanchuchu.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://tanchuchu.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack简介</title>
    <link href="http://tanchuchu.github.io/posts/28499/"/>
    <id>http://tanchuchu.github.io/posts/28499/</id>
    <published>2020-09-20T04:00:00.000Z</published>
    <updated>2020-11-03T15:22:19.462Z</updated>
    
    <content type="html"><![CDATA[<p>由于浏览器不能识别less等预处理器、es6等更高的语法，所以需要一些工具编译成浏览器能识别的语法，这些一个个小工具分开维护比较麻烦，这个时候前端提出一种构建工具，它包含许多个小工具，webpack就是构建工具的一种。</p><a id="more"></a><h2 id="webpack的是什么"><a href="#webpack的是什么" class="headerlink" title="webpack的是什么"></a>webpack的是什么</h2><p>是一种资源构建工具，是一个静态模块打包器（module bundler）<br><a href="https://www.processon.com/diagraming/5f66e0ce5653bb28eb489e89">图解</a></p><h2 id="webpack的五个核心概念"><a href="#webpack的五个核心概念" class="headerlink" title="webpack的五个核心概念"></a>webpack的五个核心概念</h2><ul><li>Entry 选择which为入口文件，分析构建内部依赖图</li><li>Loader 处理非js文件，翻译成webpack能理解的文件（webpack自身只理解js）</li><li>Plugins(插件) 执行更广的任务，插件的范围包括，从打包优化和压缩到重新定义环境中的变量等</li><li>Output 输出打包后的资源bundle存放到哪里去，以及如何命名</li><li>Mode 指示webpack配置的模式</li></ul><p>1.development模式—-能让代码本地调试运行的环境（简单，能运行即可）<br>2.production模式 —-能让代码优化上线运行的环境（复杂，考虑的问题较多，代码优化用户体检等）</p><h2 id="初始化webpack"><a href="#初始化webpack" class="headerlink" title="初始化webpack"></a>初始化webpack</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">npm init &#x2F;&#x2F;初始化</span><br><span class="line">命名...</span><br><span class="line">npm i webpack webpack-cli -g  &#x2F;&#x2F;全局安装webpack和webpack-cli</span><br><span class="line">npm i webpack webpack-cli -D &#x2F;&#x2F;配置成development模式</span><br><span class="line"></span><br><span class="line">项目结构</span><br><span class="line">webpack</span><br><span class="line">-src (打包原文件)</span><br><span class="line">  -index.js (入口文件)</span><br><span class="line">-build (打包后的bundle资源)</span><br><span class="line">  -index.html(可将打包后的built.js资源引入；安装了node也可以在终端执行node .&#x2F;build&#x2F;built.js)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行指令: (引入新的代码需要重新运行指令)</span><br><span class="line">1.开发环境</span><br><span class="line">webpack .&#x2F;src&#x2F;index.js -o .&#x2F;build&#x2F;built.js --mode&#x3D;development</span><br><span class="line">webpack会以 .&#x2F;src&#x2F;index.js为入口文件开始打包，打包后输出到.&#x2F;build&#x2F;built.js文件，整体打包环境是开发环境</span><br><span class="line"></span><br><span class="line">2.生产环境</span><br><span class="line">webpack .&#x2F;src&#x2F;index.js -o .&#x2F;build&#x2F;built.js --mode&#x3D;production</span><br><span class="line">webpack会以.&#x2F;src&#x2F;index.js为入口文件开始打包，打包后输出到.&#x2F;build&#x2F;built.js文件，整体打包环境是生产环境</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">打包后会生产一个Hash: 61dd0f6771f995de05bb (可以作为文件命名)</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>webpack能处理js、json资源，不能打包css、img等其他资源</li><li>生产环境和开发环境能将es6模块化编译成浏览器能识别的模块化资源</li><li>生产环境会比开发环境多一个压缩js代码</li></ul><h2 id="打包资源"><a href="#打包资源" class="headerlink" title="打包资源"></a>打包资源</h2><p>js/json资源webpack能理解，通过运行只能即可打包完成，此处主要介绍非js/json文件的打包</p><h4 id="打包html资源"><a href="#打包html资源" class="headerlink" title="打包html资源"></a>打包html资源</h4><p>在根目录下创建webpack.config.js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;loader的配置：1.下载 2.使用</span><br><span class="line">&#x2F;&#x2F;plugins的配置：1.下载 2.引入 3.使用</span><br><span class="line"></span><br><span class="line">const &#123;resolve&#125; &#x3D; require(&#39;path&#39;); &#x2F;&#x2F;node核心模块的一个方法</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry:&#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:&#39;build.js&#39;,</span><br><span class="line">        path:resolve(__dirname,&#39;build&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#x2F;&#x2F;loader的配置</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        &#x2F;&#x2F;plugins的配置</span><br><span class="line">        &#x2F;&#x2F;打包html下载html-webpack-plugin</span><br><span class="line">        &#x2F;&#x2F;引入后在终端执行webpack指令</span><br><span class="line">        &#x2F;&#x2F;new HtmlWebpackPlugin()功能：默认在build创建一个空的html文件，会自动引入打包输出的所有资源（js&#x2F;css等）</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            &#x2F;&#x2F;会复制.&#x2F;src&#x2F;index.html原文件，并自动引入打包输出的所有资源（js&#x2F;css等）</span><br><span class="line">            template: &quot;.&#x2F;src&#x2F;index.html&quot;</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    mode: &#39;development&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打包图片资源"><a href="#打包图片资源" class="headerlink" title="打包图片资源"></a>打包图片资源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const &#123;resolve&#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry:&#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename:&#39;built.js&#39;,</span><br><span class="line">        path:resolve(__dirname,&#39;build&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#x2F;&#x2F;loader都需要下载 npm i xx-loader -D</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.less$&#x2F;,</span><br><span class="line">                &#x2F;&#x2F;要使用多个loader处理时用use</span><br><span class="line">                use:[&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;less-loader&#39;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;   &#x2F;&#x2F;处理图片资源</span><br><span class="line">                &#x2F;&#x2F;默认处理不了直接引入src下的图片，这个时候需要新的loader</span><br><span class="line">                test:&#x2F;\.(jpg|png|gif)$&#x2F;,</span><br><span class="line">                &#x2F;&#x2F;只需使用一个loader</span><br><span class="line">                &#x2F;&#x2F;下载url-loader file-loader 前者依赖于后者</span><br><span class="line">                loader: &#39;url-loader&#39;,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    &#x2F;&#x2F;图片大小小于2kb，就转化成base64（优点：减少请求数量，减轻服务器压力；缺点：文件体积大，请求速度变慢）</span><br><span class="line">                    limit:2*1024, &#x2F;&#x2F;以实际项目最小图片大小值为准</span><br><span class="line">                    esModule:false, &#x2F;&#x2F;关闭es6模块化</span><br><span class="line">                    name:&#39;[hash:10].[ext]&#39;, &#x2F;&#x2F;[hash:10] 取hash值前10位 [ext]取原文件的扩展名</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.html$&#x2F;,</span><br><span class="line">                loader:&#39;html-loader&#39; &#x2F;&#x2F;处理html文件的直接标签引入的img图片，负责引入img，从而被url-loader处理</span><br><span class="line">                &#x2F;&#x2F; html-loader打包引入的默认时commonJs，而url-loader是es6模块化解析，后者解析式会出现[object,Module]问题，需要在上面options内进行设置</span><br><span class="line">                &#x2F;&#x2F;会打包形成efb6d509211981c64fa83c8fadf09425.png的图片名，可在上面设置name</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template:&#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    mode:&#39;development&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;运行后发现出现Error: Cannot find module &#39;less&#39;</span><br><span class="line">&#x2F;&#x2F;安装npm install less --save-dev后重新运行即可</span><br><span class="line">&#x2F;&#x2F;loader都需要下载 npm i xx-loader -D</span><br></pre></td></tr></table></figure><h4 id="打包其他资源"><a href="#打包其他资源" class="headerlink" title="打包其他资源"></a>打包其他资源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">const &#123;resolve&#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry:&#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:&#39;built.js&#39;,</span><br><span class="line">        path:resolve(__dirname,&#39;build&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.css$&#x2F;,</span><br><span class="line">                use:[&#39;style-loader&#39;,&#39;css-loader&#39;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#x2F;&#x2F;打包其他资源（除html&#x2F;js&#x2F;css以外的资源）</span><br><span class="line">            &#123;</span><br><span class="line">                exclude:&#x2F;\.(html|css|js|less|jpg|png|gif)$&#x2F;</span><br><span class="line">                loader:&#39;file-loader&#39;,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    name:&#39;[hash:10].[ext]&#39;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: &quot;.&#x2F;src&#x2F;index.html&quot;</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    mode:&#39;development&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h5><p>开发服务器devServer：用来自动化-自动编译，自动打开浏览器，自动刷新</p><p>特点：在内存中编译打包，不会有输出(build文件没有打包后的输出文件)</p><p>下载：npm i webpack-dev-server -D</p><p>运行：npx webpack-dev-server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">const &#123;resolve&#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry:&#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:&#39;built.js&#39;,</span><br><span class="line">        path:resolve(__dirname,&#39;build&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.css$&#x2F;,</span><br><span class="line">                use:[&#39;style-loader&#39;,&#39;css-loader&#39;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#x2F;&#x2F;打包其他资源（除html&#x2F;js&#x2F;css以外的资源）</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;排除css&#x2F;html&#x2F;html资源，就会默认处理其他资源</span><br><span class="line">                exclude:&#x2F;\.(html|js|css)$&#x2F;,</span><br><span class="line">                loader:&#39;file-loader&#39;,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    name:&#39;[hash:10].[ext]&#39;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: &quot;.&#x2F;src&#x2F;index.html&quot;</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    mode:&#39;development&#39;,</span><br><span class="line">    devServe:&#123;</span><br><span class="line">        &#x2F;&#x2F;项目构建后的路径</span><br><span class="line">        contentBase:resolve(__dirname,&#39;build&#39;),</span><br><span class="line">        &#x2F;&#x2F;启动gzip压缩</span><br><span class="line">        compress:true,</span><br><span class="line">        &#x2F;&#x2F;端口号</span><br><span class="line">        port:3000,</span><br><span class="line">        &#x2F;&#x2F;开启自动打开浏览器</span><br><span class="line">        open:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于浏览器不能识别less等预处理器、es6等更高的语法，所以需要一些工具编译成浏览器能识别的语法，这些一个个小工具分开维护比较麻烦，这个时候前端提出一种构建工具，它包含许多个小工具，webpack就是构建工具的一种。&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://tanchuchu.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://tanchuchu.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>笔记标题</title>
    <link href="http://tanchuchu.github.io/posts/24974/"/>
    <id>http://tanchuchu.github.io/posts/24974/</id>
    <published>2020-09-18T14:00:00.000Z</published>
    <updated>2020-11-03T15:22:19.495Z</updated>
    
    <content type="html"><![CDATA[<p>这里是简介！！！！！！！！</p><a id="more"></a><h3 id="标题一-h3"><a href="#标题一-h3" class="headerlink" title="标题一(h3)"></a>标题一(h3)</h3><h4 id="二级标题-（h4）"><a href="#二级标题-（h4）" class="headerlink" title="二级标题 （h4）"></a>二级标题 （h4）</h4><ol><li>这里是有序列表1</li><li>这里是有序列表2</li></ol><ul><li>这里是无序列表1</li><li>这里是无序列表2</li></ul><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><a href="https://www.runoob.com/markdown/md-paragraph.html">这是一个链接（Markdown教程）</a></p><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p><img src="https://file.iviewui.com/asd/asd-pro-3.png" alt="这是一个图片"></p><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'张三'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里是简介！！！！！！！！&lt;/p&gt;
    
    </summary>
    
    
      <category term="后台管理" scheme="http://tanchuchu.github.io/categories/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="js" scheme="http://tanchuchu.github.io/tags/js/"/>
    
      <category term="vue" scheme="http://tanchuchu.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>加密文章测试</title>
    <link href="http://tanchuchu.github.io/posts/7e709353/"/>
    <id>http://tanchuchu.github.io/posts/7e709353/</id>
    <published>2020-01-21T02:14:11.000Z</published>
    <updated>2020-08-28T01:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟（密码：123456）！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="7c9df5696499b0943b0714a90278edc9cdb12f7962c2949648214eee27e824eb">42401e656a30ed09e8e3b0fbe2fbd18ae1b8c2138de0b629bd1233cbc0cc80918b020088b54c79621b8ef9a9af7b0f06b4f358e8c86ef99d097fb161589581b453752da7da2e21aa4d35b94c835c62d1204ab327d5d9241d6be3c6b4b1e68d3697229826ffa52b53920e92cbe496af209269f803aa7450ba136338b0e891ba54f6fe48d0d23c1ba5b981305fdee3badd054b7ad20712af650adf010b25c3fa117b769979c2ef7a2ccccee14b24ed84530b911e7b68c43d9f4592ba8687b2c7fb</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="private" scheme="http://tanchuchu.github.io/categories/private/"/>
    
    
      <category term="加密文章" scheme="http://tanchuchu.github.io/tags/%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>不蒜子统计常见问题</title>
    <link href="http://tanchuchu.github.io/posts/89986481/"/>
    <id>http://tanchuchu.github.io/posts/89986481/</id>
    <published>2019-12-21T00:46:08.000Z</published>
    <updated>2020-08-28T01:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>不蒜子统计官网：<a href="http://busuanzi.ibruce.info/">http://busuanzi.ibruce.info/</a></p><p>详细使用教程：<a href="http://ibruce.info/2015/04/04/busuanzi/">http://ibruce.info/2015/04/04/busuanzi/</a></p><p>目前支持的功能：（两行代码，搞定计数；方便、简洁、实用）</p><p>a、显示站点总访问量</p><p>b、显示单页面访问量</p><a id="more"></a><p>c、显示站点总访问量和单页面访问量</p><p>d、只计数不显示</p><p>关于怎么实现当天、昨天、本月、上月（即具体时间段）的访问量目前没有支持，请配合目前不蒜子支持的功能自行实现。</p><h3 id="1-常见问题400错误，统计不生效"><a href="#1-常见问题400错误，统计不生效" class="headerlink" title="1.常见问题400错误，统计不生效"></a>1.常见问题400错误，统计不生效</h3><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221085006.png" alt="">            </p><p>如图<strong>（1）</strong>的地方没有加载出统计数据</p><p>此时F12打开浏览器控制台，找到<strong>（2）</strong>network地方，刷新一下页面找到<strong>（3）</strong>，请求统计的网址如图所示，查看<strong>（4）</strong>referrer-policy是否如图所示，如图的话是不能访问的，需要更改。</p><p><strong>导致此问题原因</strong>，检查网页源码中，一般header有如下标签</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221085114.png" alt="">    </p><p><strong>解决方法</strong>，去掉此标签，之后访问如下<strong>（1）</strong>已有统计值，<strong>（2）</strong>已改变。可详细对比正常使用不蒜子统计网址<a href="https://removeif.github.io/">https://removeif.github.io/</a> 中请求<strong>busuanzi?jsonpCallback=BusuanziCallback_236107382952地址</strong>的请求和返回参数的差异！</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221085231.png" alt=""></p><p><strong>这样设置带来的影响</strong>，可能有些图床的图片不能显示，会图裂，如新浪图床。解决方法，可以用其他不冲突的图床。</p><h3 id="2-统计访问数巨大（清零问题）"><a href="#2-统计访问数巨大（清零问题）" class="headerlink" title="2.统计访问数巨大（清零问题）"></a>2.统计访问数巨大（清零问题）</h3><p><a href="http://localhost:4000/">http://localhost:4000/</a> 或<a href="http://127.0.0.1:4000/">http://127.0.0.1:4000/</a> 访问时，统计数巨大，这是正常的，不用清零。部署到线上，用线上域名网址访问数据就正常了。</p><h3 id="3-统计无法访问如图所示"><a href="#3-统计无法访问如图所示" class="headerlink" title="3.统计无法访问如图所示"></a>3.统计无法访问如图所示</h3><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221085258.png" alt=""></p><p>查看红色url部分如下所示</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221085320.png" alt=""></p><p>此问题是Request URL填写错误，请确保Request URL前部分为<a href="http://busuanzi.ibruce.info/busuanzi?"><strong>http://busuanzi.ibruce.info/busuanzi?</strong></a><strong>，，，，如下</strong></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221085345.png" alt=""></p><p>同时查看Response，出现如下数据，就是成功访问了不蒜子统计，如果网站中还没出统计数据，就是自己的代码写错了，检查代码</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221085405.png" alt=""></p><h3 id="4-其余问题"><a href="#4-其余问题" class="headerlink" title="4.其余问题"></a>4.其余问题</h3><p><strong>(1)</strong>.同一个页面，同名的id标签确保只能放一个如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span> <span class="attr">style</span>=<span class="string">"display: inline;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同一个页面id名为busuanzi_value_site_uv只能放一个!</p><p><strong>(2)</strong>.safari（包括移动端的safari）浏览器页面pv统计问题，如下，因为Safari浏览器referer在文章页面时也上送的域名（而单个页面的pv统计是根据页面路径，即上送的referer），所以此时页面的pv返回的站点的pv值。暂时没解决方法，可自行搜索解决方案构造正确的referer值。对于此问题可以换个浏览器看哇，比如Chrome，哈哈。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221085514.png" alt=""></p><p><strong>(3)</strong>.部分live2d可能与不蒜子统计有冲突，出现此问题时，请查看网页源码引用统计id处是否被隐藏，一般网页上会自动加上display: none;自行选择性的使用。网友的解决方法，修改源码为以下，并引用修改后的js文件</p><p>不蒜子源码文件：</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191221085823.png" alt=""></p><p> 修改为如下：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">var bszCaller, bszTag;</span><br><span class="line"><span class="addition">!function() &#123;</span></span><br><span class="line">    var c, d, e, a = !1, b = [];</span><br><span class="line">    ready = function(c) &#123;</span><br><span class="line">        return a || "interactive" <span class="comment">=== document.readyState || "complete" === document.readyState ? c.call(document) : b.push(function() &#123;</span></span><br><span class="line">            return c.call(this)</span><br><span class="line">        &#125;),</span><br><span class="line">        this</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    d = function() &#123;</span><br><span class="line">        for (var a = 0, c = b.length; c &gt; a; a++)</span><br><span class="line">            b[a].apply(document);</span><br><span class="line">        b = []</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    e = function() &#123;</span><br><span class="line">        a || (a = !0,</span><br><span class="line">        d.call(window),</span><br><span class="line">        document.removeEventListener ? document.removeEventListener("DOMContentLoaded", e, !1) : document.attachEvent &amp;&amp; (document.detachEvent("onreadystatechange", e),</span><br><span class="line">        window == window.top &amp;&amp; (clearInterval(c),</span><br><span class="line">        c = null)))</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    document.addEventListener ? document.addEventListener("DOMContentLoaded", e, !1) : document.attachEvent &amp;&amp; (document.attachEvent("onreadystatechange", function() &#123;</span><br><span class="line">        /loaded|complete/.test(document.readyState) &amp;&amp; e()</span><br><span class="line">    &#125;),</span><br><span class="line">    window == window.top &amp;&amp; (c = setInterval(function() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            a || document.documentElement.doScroll("left")</span><br><span class="line">        &#125; catch (b) &#123;</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        e()</span><br><span class="line">    &#125;, 5)))</span><br><span class="line">&#125;(),</span><br><span class="line">bszCaller = &#123;</span><br><span class="line">    fetch: function(a, b) &#123;</span><br><span class="line">        var c = "BusuanziCallback_" + Math.floor(1099511627776 * Math.random());</span><br><span class="line">        window[c] = this.evalCall(b),</span><br><span class="line">        a = a.replace("=BusuanziCallback", "=" + c),</span><br><span class="line">        scriptTag = document.createElement("SCRIPT"),</span><br><span class="line">        scriptTag.type = "text/javascript",</span><br><span class="line">        scriptTag.defer = !0,</span><br><span class="line">        scriptTag.src = a,</span><br><span class="line">        document.getElementsByTagName("HEAD")[0].appendChild(scriptTag)</span><br><span class="line">    &#125;,</span><br><span class="line">    evalCall: function(a) &#123;</span><br><span class="line">        return function(b) &#123;</span><br><span class="line">            ready(function() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    a(b), </span><br><span class="line"><span class="deletion">-                      // 此处为修改的逻辑</span></span><br><span class="line"><span class="deletion">-                      scriptTag.parentElement.removeChild(scriptTag)</span></span><br><span class="line"><span class="addition">+                      if(scriptTag != null &amp;&amp; scriptTag.parentElement != null)&#123;</span></span><br><span class="line"><span class="addition">+                       scriptTag.parentElement.removeChild(scriptTag)</span></span><br><span class="line"><span class="addition">+                      &#125;</span></span><br><span class="line">                &#125; catch (c) &#123;</span><br><span class="line">                    bszTag.hides()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">bszCaller.fetch("//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback", function(a) &#123;</span><br><span class="line">    bszTag.texts(a),</span><br><span class="line">    bszTag.shows()</span><br><span class="line">&#125;),</span><br><span class="line">bszTag = &#123;</span><br><span class="line">    bszs: ["site_pv", "page_pv", "site_uv"],</span><br><span class="line">    texts: function(a) &#123;</span><br><span class="line">        this.bszs.map(function(b) &#123;</span><br><span class="line">            var c = document.getElementById("busuanzi_value_" + b);</span><br><span class="line">            c &amp;&amp; (c.innerHTML = a[b])</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    hides: function() &#123;</span><br><span class="line">        this.bszs.map(function(a) &#123;</span><br><span class="line">            var b = document.getElementById("busuanzi_container_" + a);</span><br><span class="line">            b &amp;&amp; (b.style.display = "none")</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    shows: function() &#123;</span><br><span class="line">        this.bszs.map(function(a) &#123;</span><br><span class="line">            var b = document.getElementById("busuanzi_container_" + a);</span><br><span class="line">            b &amp;&amp; (b.style.display = "inline")</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-官方群！！！"><a href="#5-官方群！！！" class="headerlink" title="5.官方群！！！"></a>5.官方群！！！</h3><p>群号：419260983，有其余问题进群讨论，<strong>提问时遇到其他的问题请同时发出问题的在线网址！！！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不蒜子统计官网：&lt;a href=&quot;http://busuanzi.ibruce.info/&quot;&gt;http://busuanzi.ibruce.info/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;详细使用教程：&lt;a href=&quot;http://ibruce.info/2015/04/04/busuanzi/&quot;&gt;http://ibruce.info/2015/04/04/busuanzi/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前支持的功能：（两行代码，搞定计数；方便、简洁、实用）&lt;/p&gt;
&lt;p&gt;a、显示站点总访问量&lt;/p&gt;
&lt;p&gt;b、显示单页面访问量&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具教程" scheme="http://tanchuchu.github.io/categories/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/"/>
    
      <category term="博客统计插件" scheme="http://tanchuchu.github.io/categories/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/%E5%8D%9A%E5%AE%A2%E7%BB%9F%E8%AE%A1%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="博客统计插件" scheme="http://tanchuchu.github.io/tags/%E5%8D%9A%E5%AE%A2%E7%BB%9F%E8%AE%A1%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
</feed>
